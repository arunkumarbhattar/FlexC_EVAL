; ModuleID = 'extra.c'
target datalayout = "e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:32:32-n8:16:32-S128"
target triple = "i386-pc-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i32, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i32, i32, [40 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.stat = type { i64, i16, i32, i32, i32, i32, i32, i64, i16, i32, i32, i32, %struct.timespec, %struct.timespec, %struct.timespec, i32, i32 }
%struct.timespec = type { i32, i32 }
%struct.utimbuf = type { i32, i32 }
%struct.passwd = type { i8*, i8*, i32, i32, i8*, i8*, i8* }

@.str = private unnamed_addr constant [4 x i8] c"Re-\00", align 1
@stderr = external global %struct._IO_FILE*
@.str1 = private unnamed_addr constant [45 x i8] c"Keywords do not match or they are too long.\0A\00", align 1
@.str2 = private unnamed_addr constant [19 x i8] c"Enter passphrase: \00", align 1
@.str3 = private unnamed_addr constant [49 x i8] c"Enter the passphrase (maximum of %d characters)\0A\00", align 1
@.str4 = private unnamed_addr constant [71 x i8] c"Please use a combination of upper and lower case letters and numbers.\0A\00", align 1
@double_check = external global i32
@stream_flag = external global i32
@stdin = external global %struct._IO_FILE*
@.str5 = private unnamed_addr constant [39 x i8] c"Unsupported version of encrypted file\0A\00", align 1
@.str6 = private unnamed_addr constant [36 x i8] c"No Initialization vector was used.\0A\00", align 1
@noiv = external global i32
@hash_algorithm = external global i32
@.str7 = private unnamed_addr constant [112 x i8] c"This is a file encrypted with the 2.2 version of mcrypt. Unfortunately you'll need that version to decrypt it.\0A\00", align 1
@.str8 = private unnamed_addr constant [112 x i8] c"This is a file encrypted with the 2.1 version of mcrypt. Unfortunately you'll need that version to decrypt it.\0A\00", align 1
@.str9 = private unnamed_addr constant [93 x i8] c"Unable to get algorithm information. Use the --bare flag and specify the algorithm manualy.\0A\00", align 1
@.str10 = private unnamed_addr constant [5 x i8] c"stat\00", align 1
@.str11 = private unnamed_addr constant [6 x i8] c"utime\00", align 1
@.str12 = private unnamed_addr constant [28 x i8] c"Signal %d caught. Exiting.\0A\00", align 1
@.str13 = private unnamed_addr constant [29 x i8] c"\0ASignal %d caught. Exiting.\0A\00", align 1
@cleanDelete = external global i32
@outfile = external global i8*
@.str14 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str15 = private unnamed_addr constant [43 x i8] c"Keyfile could not be opened. Ignoring it.\0A\00", align 1
@.str16 = private unnamed_addr constant [43 x i8] c"Keyfile could not be locked. Ignoring it.\0A\00", align 1
@.str17 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str18 = private unnamed_addr constant [58 x i8] c"%s: %s already exists; do you wish to overwrite (y or n)?\00", align 1
@.str19 = private unnamed_addr constant [9 x i8] c"/dev/tty\00", align 1
@.str20 = private unnamed_addr constant [2 x i8] c"y\00", align 1
@.str21 = private unnamed_addr constant [2 x i8] c"Y\00", align 1

; Function Attrs: nounwind
define i8* @my_getpass(i8* %prt) #0 {
entry:
  %retval = alloca i8*, align 4
  %prt.addr = alloca i8*, align 4
  %atmp = alloca i8*, align 4
  %ztmp = alloca i8*, align 4
  %btmp = alloca i8*, align 4
  %string_tmp = alloca [200 x i8], align 1
  store i8* %prt, i8** %prt.addr, align 4
  %call = call i8* @_secure_mcrypt_malloc(i32 513)
  store i8* %call, i8** %ztmp, align 4
  %0 = load i8** %prt.addr, align 4
  %call1 = call i8* @getpass(i8* %0)
  store i8* %call1, i8** %atmp, align 4
  %arraydecay = getelementptr inbounds [200 x i8]* %string_tmp, i32 0, i32 0
  call void @Bzero(i8* %arraydecay, i32 200)
  %1 = load i8** %ztmp, align 4
  call void @Bzero(i8* %1, i32 513)
  %2 = load i8** %ztmp, align 4
  %3 = load i8** %atmp, align 4
  %call2 = call i8* @strncpy(i8* %2, i8* %3, i32 513) #3
  %4 = load i8** %ztmp, align 4
  %arrayidx = getelementptr inbounds i8* %4, i32 512
  store i8 0, i8* %arrayidx, align 1
  %5 = load i8** %atmp, align 4
  %6 = load i8** %atmp, align 4
  %call3 = call i32 @strlen(i8* %6) #5
  call void @_secure_mcrypt_free(i8* %5, i32 %call3)
  %arraydecay4 = getelementptr inbounds [200 x i8]* %string_tmp, i32 0, i32 0
  %call5 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8]* @.str, i32 0, i32 0)) #3
  %call6 = call i8* @strcpy(i8* %arraydecay4, i8* %call5) #3
  %arraydecay7 = getelementptr inbounds [200 x i8]* %string_tmp, i32 0, i32 0
  %7 = load i8** %prt.addr, align 4
  %call8 = call i8* @strcat(i8* %arraydecay7, i8* %7) #3
  %arraydecay9 = getelementptr inbounds [200 x i8]* %string_tmp, i32 0, i32 0
  %call10 = call i8* @getpass(i8* %arraydecay9)
  store i8* %call10, i8** %btmp, align 4
  %8 = load i8** %ztmp, align 4
  %9 = load i8** %btmp, align 4
  %call11 = call i32 @strcmp(i8* %8, i8* %9) #5
  %cmp = icmp ne i32 %call11, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %10 = load %struct._IO_FILE** @stderr, align 4
  %call12 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8]* @.str1, i32 0, i32 0)) #3
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %10, i8* %call12)
  %11 = load i8** %btmp, align 4
  call void @_secure_mcrypt_free(i8* %11, i32 513)
  %12 = load i8** %ztmp, align 4
  call void @_secure_mcrypt_free(i8* %12, i32 513)
  store i8* null, i8** %retval
  br label %return

if.end:                                           ; preds = %entry
  %13 = load i8** %btmp, align 4
  call void @_secure_mcrypt_free(i8* %13, i32 513)
  %14 = load i8** %ztmp, align 4
  store i8* %14, i8** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %15 = load i8** %retval
  ret i8* %15
}

declare i8* @_secure_mcrypt_malloc(i32) #1

declare i8* @getpass(i8*) #1

; Function Attrs: nounwind
define void @Bzero(i8* %s, i32 %n) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8** %s.addr, align 4
  %1 = load i32* %n.addr, align 4
  call void @llvm.memset.p0i8.i32(i8* %0, i8 0, i32 %1, i32 1, i1 false)
  ret void
}

; Function Attrs: nounwind
declare i8* @strncpy(i8*, i8*, i32) #0

declare void @_secure_mcrypt_free(i8*, i32) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8*) #2

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8*) #0

; Function Attrs: nounwind
declare i8* @gettext(i8*) #0

; Function Attrs: nounwind
declare i8* @strcat(i8*, i8*) #0

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #2

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #1

; Function Attrs: nounwind
define i8* @get_password(i32 %numofchar, i32 %mode, i32* %len, i8* %salt) #0 {
entry:
  %retval = alloca i8*, align 4
  %numofchar.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %len.addr = alloca i32*, align 4
  %salt.addr = alloca i8*, align 4
  %tmp = alloca i8*, align 4
  %msg = alloca [200 x i8], align 1
  store i32 %numofchar, i32* %numofchar.addr, align 4
  store i32 %mode, i32* %mode.addr, align 4
  store i32* %len, i32** %len.addr, align 4
  store i8* %salt, i8** %salt.addr, align 4
  store i8* null, i8** %tmp, align 4
  %arraydecay = getelementptr inbounds [200 x i8]* %msg, i32 0, i32 0
  %call = call i8* @gettext(i8* getelementptr inbounds ([19 x i8]* @.str2, i32 0, i32 0)) #3
  %call2 = call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay, i8* %call) #3
  %0 = load i32* %mode.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE** @stderr, align 4
  %call3 = call i8* @gettext(i8* getelementptr inbounds ([49 x i8]* @.str3, i32 0, i32 0)) #3
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %1, i8* %call3, i32 512)
  %2 = load %struct._IO_FILE** @stderr, align 4
  %call5 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8]* @.str4, i32 0, i32 0)) #3
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %2, i8* %call5)
  %arraydecay7 = getelementptr inbounds [200 x i8]* %msg, i32 0, i32 0
  %call8 = call i8* @my_getpass(i8* %arraydecay7)
  store i8* %call8, i8** %tmp, align 4
  br label %if.end16

if.else:                                          ; preds = %entry
  %3 = load i32* @double_check, align 4
  %cmp9 = icmp eq i32 %3, 0
  br i1 %cmp9, label %if.then10, label %if.else13

if.then10:                                        ; preds = %if.else
  %arraydecay11 = getelementptr inbounds [200 x i8]* %msg, i32 0, i32 0
  %call12 = call i8* @getpass(i8* %arraydecay11)
  store i8* %call12, i8** %tmp, align 4
  br label %if.end

if.else13:                                        ; preds = %if.else
  %arraydecay14 = getelementptr inbounds [200 x i8]* %msg, i32 0, i32 0
  %call15 = call i8* @my_getpass(i8* %arraydecay14)
  store i8* %call15, i8** %tmp, align 4
  br label %if.end

if.end:                                           ; preds = %if.else13, %if.then10
  br label %if.end16

if.end16:                                         ; preds = %if.end, %if.then
  %4 = load i8** %tmp, align 4
  %cmp17 = icmp eq i8* %4, null
  br i1 %cmp17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %if.end16
  store i8* null, i8** %retval
  br label %return

if.end19:                                         ; preds = %if.end16
  %5 = load i8** %tmp, align 4
  %call20 = call i32 @strlen(i8* %5) #5
  %6 = load i32** %len.addr, align 4
  store i32 %call20, i32* %6, align 4
  %7 = load i8** %tmp, align 4
  store i8* %7, i8** %retval
  br label %return

return:                                           ; preds = %if.end19, %if.then18
  %8 = load i8** %retval
  ret i8* %8
}

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #0

; Function Attrs: nounwind
define i32 @check_file(i8* %filename) #0 {
entry:
  %retval = alloca i32, align 4
  %filename.addr = alloca i8*, align 4
  %ostat = alloca %struct.stat, align 4
  store i8* %filename, i8** %filename.addr, align 4
  %0 = load i8** %filename.addr, align 4
  %call = call i32 @stat(i8* %0, %struct.stat* %ostat) #3
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.else:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %1 = load i32* %retval
  ret i32 %1
}

; Function Attrs: nounwind
declare i32 @stat(i8*, %struct.stat*) #0

; Function Attrs: nounwind
define void @read_until_null(i8* %pointer, %struct._IO_FILE* %fstream) #0 {
entry:
  %pointer.addr = alloca i8*, align 4
  %fstream.addr = alloca %struct._IO_FILE*, align 4
  %i = alloca i32, align 4
  store i8* %pointer, i8** %pointer.addr, align 4
  store %struct._IO_FILE* %fstream, %struct._IO_FILE** %fstream.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %cmp = icmp slt i32 %0, 100
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32* %i, align 4
  %2 = load i8** %pointer.addr, align 4
  %arrayidx = getelementptr inbounds i8* %2, i32 %1
  %3 = load %struct._IO_FILE** %fstream.addr, align 4
  %call = call i32 @fread(i8* %arrayidx, i32 1, i32 1, %struct._IO_FILE* %3)
  %4 = load i32* %i, align 4
  %5 = load i8** %pointer.addr, align 4
  %arrayidx1 = getelementptr inbounds i8* %5, i32 %4
  %6 = load i8* %arrayidx1, align 1
  %conv = sext i8 %6 to i32
  %cmp2 = icmp eq i32 %conv, 0
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  ret void
}

declare i32 @fread(i8*, i32, i32, %struct._IO_FILE*) #1

; Function Attrs: nounwind
define i32 @check_file_head(%struct._IO_FILE* %fstream, i8* %algorithm, i8* %mode, i8* %keymode, i32* %keysize, i8* %salt, i32* %salt_size) #0 {
entry:
  %retval = alloca i32, align 4
  %fstream.addr = alloca %struct._IO_FILE*, align 4
  %algorithm.addr = alloca i8*, align 4
  %mode.addr = alloca i8*, align 4
  %keymode.addr = alloca i8*, align 4
  %keysize.addr = alloca i32*, align 4
  %salt.addr = alloca i8*, align 4
  %salt_size.addr = alloca i32*, align 4
  %buf = alloca [3 x i8], align 1
  %tmp_buf = alloca [101 x i8], align 1
  %keylen = alloca i16, align 2
  %flags = alloca i8, align 1
  %sflag = alloca i8, align 1
  store %struct._IO_FILE* %fstream, %struct._IO_FILE** %fstream.addr, align 4
  store i8* %algorithm, i8** %algorithm.addr, align 4
  store i8* %mode, i8** %mode.addr, align 4
  store i8* %keymode, i8** %keymode.addr, align 4
  store i32* %keysize, i32** %keysize.addr, align 4
  store i8* %salt, i8** %salt.addr, align 4
  store i32* %salt_size, i32** %salt_size.addr, align 4
  %0 = load i32* @stream_flag, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE** @stdin, align 4
  store %struct._IO_FILE* %1, %struct._IO_FILE** %fstream.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arraydecay = getelementptr inbounds [3 x i8]* %buf, i32 0, i32 0
  %2 = load %struct._IO_FILE** %fstream.addr, align 4
  %call = call i32 @fread(i8* %arraydecay, i32 1, i32 3, %struct._IO_FILE* %2)
  %3 = load %struct._IO_FILE** %fstream.addr, align 4
  %call1 = call i32 @fread(i8* %flags, i32 1, i32 1, %struct._IO_FILE* %3)
  %arrayidx = getelementptr inbounds [3 x i8]* %buf, i32 0, i32 0
  %4 = load i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %cmp2 = icmp eq i32 %conv, 0
  br i1 %cmp2, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end
  %arrayidx4 = getelementptr inbounds [3 x i8]* %buf, i32 0, i32 1
  %5 = load i8* %arrayidx4, align 1
  %conv5 = sext i8 %5 to i32
  %cmp6 = icmp eq i32 %conv5, 109
  br i1 %cmp6, label %land.lhs.true8, label %if.else

land.lhs.true8:                                   ; preds = %land.lhs.true
  %arrayidx9 = getelementptr inbounds [3 x i8]* %buf, i32 0, i32 2
  %6 = load i8* %arrayidx9, align 1
  %conv10 = sext i8 %6 to i32
  %cmp11 = icmp eq i32 %conv10, 3
  br i1 %cmp11, label %if.then13, label %if.else

if.then13:                                        ; preds = %land.lhs.true8
  %7 = load i8* %flags, align 1
  %conv14 = zext i8 %7 to i32
  %shr = lshr i32 %conv14, 0
  %and = and i32 %shr, 1
  %cmp15 = icmp ne i32 %and, 0
  br i1 %cmp15, label %if.then17, label %if.end19

if.then17:                                        ; preds = %if.then13
  %call18 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8]* @.str5, i32 0, i32 0)) #3
  call void @err_crit(i8* %call18)
  store i32 -1, i32* %retval
  br label %return

if.end19:                                         ; preds = %if.then13
  %8 = load i8* %flags, align 1
  %conv20 = zext i8 %8 to i32
  %shr21 = lshr i32 %conv20, 1
  %and22 = and i32 %shr21, 1
  %cmp23 = icmp ne i32 %and22, 0
  br i1 %cmp23, label %if.then25, label %if.end27

if.then25:                                        ; preds = %if.end19
  %call26 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8]* @.str5, i32 0, i32 0)) #3
  call void @err_crit(i8* %call26)
  store i32 -1, i32* %retval
  br label %return

if.end27:                                         ; preds = %if.end19
  %9 = load i8* %flags, align 1
  %conv28 = zext i8 %9 to i32
  %shr29 = lshr i32 %conv28, 2
  %and30 = and i32 %shr29, 1
  %cmp31 = icmp ne i32 %and30, 0
  br i1 %cmp31, label %if.then33, label %if.end35

if.then33:                                        ; preds = %if.end27
  %call34 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8]* @.str5, i32 0, i32 0)) #3
  call void @err_crit(i8* %call34)
  store i32 -1, i32* %retval
  br label %return

if.end35:                                         ; preds = %if.end27
  %10 = load i8* %flags, align 1
  %conv36 = zext i8 %10 to i32
  %shr37 = lshr i32 %conv36, 3
  %and38 = and i32 %shr37, 1
  %cmp39 = icmp ne i32 %and38, 0
  br i1 %cmp39, label %if.then41, label %if.end43

if.then41:                                        ; preds = %if.end35
  %call42 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8]* @.str5, i32 0, i32 0)) #3
  call void @err_crit(i8* %call42)
  store i32 -1, i32* %retval
  br label %return

if.end43:                                         ; preds = %if.end35
  %11 = load i8* %flags, align 1
  %conv44 = zext i8 %11 to i32
  %shr45 = lshr i32 %conv44, 4
  %and46 = and i32 %shr45, 1
  %cmp47 = icmp ne i32 %and46, 0
  br i1 %cmp47, label %if.then49, label %if.end51

if.then49:                                        ; preds = %if.end43
  %call50 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8]* @.str5, i32 0, i32 0)) #3
  call void @err_crit(i8* %call50)
  store i32 -1, i32* %retval
  br label %return

if.end51:                                         ; preds = %if.end43
  %12 = load i8* %flags, align 1
  %conv52 = zext i8 %12 to i32
  %shr53 = lshr i32 %conv52, 5
  %and54 = and i32 %shr53, 1
  %cmp55 = icmp ne i32 %and54, 0
  br i1 %cmp55, label %if.then57, label %if.end59

if.then57:                                        ; preds = %if.end51
  %call58 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8]* @.str5, i32 0, i32 0)) #3
  call void @err_crit(i8* %call58)
  store i32 -1, i32* %retval
  br label %return

if.end59:                                         ; preds = %if.end51
  %13 = load i8* %flags, align 1
  %conv60 = zext i8 %13 to i32
  %shr61 = lshr i32 %conv60, 7
  %and62 = and i32 %shr61, 1
  %cmp63 = icmp ne i32 %and62, 0
  br i1 %cmp63, label %if.then65, label %if.end67

if.then65:                                        ; preds = %if.end59
  %call66 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8]* @.str6, i32 0, i32 0)) #3
  call void @err_warn(i8* %call66)
  store i32 1, i32* @noiv, align 4
  br label %if.end67

if.end67:                                         ; preds = %if.then65, %if.end59
  %arraydecay68 = getelementptr inbounds [101 x i8]* %tmp_buf, i32 0, i32 0
  %14 = load %struct._IO_FILE** %fstream.addr, align 4
  call void @read_until_null(i8* %arraydecay68, %struct._IO_FILE* %14)
  %15 = load i8** %algorithm.addr, align 4
  %arraydecay69 = getelementptr inbounds [101 x i8]* %tmp_buf, i32 0, i32 0
  %call70 = call i8* @strcpy(i8* %15, i8* %arraydecay69) #3
  %16 = bitcast i16* %keylen to i8*
  %17 = load %struct._IO_FILE** %fstream.addr, align 4
  %call71 = call i32 @fread(i8* %16, i32 2, i32 1, %struct._IO_FILE* %17)
  %18 = load i16* %keylen, align 2
  %conv72 = sext i16 %18 to i32
  %19 = load i32** %keysize.addr, align 4
  store i32 %conv72, i32* %19, align 4
  %arraydecay73 = getelementptr inbounds [101 x i8]* %tmp_buf, i32 0, i32 0
  %20 = load %struct._IO_FILE** %fstream.addr, align 4
  call void @read_until_null(i8* %arraydecay73, %struct._IO_FILE* %20)
  %21 = load i8** %mode.addr, align 4
  %arraydecay74 = getelementptr inbounds [101 x i8]* %tmp_buf, i32 0, i32 0
  %call75 = call i8* @strcpy(i8* %21, i8* %arraydecay74) #3
  %arraydecay76 = getelementptr inbounds [101 x i8]* %tmp_buf, i32 0, i32 0
  %22 = load %struct._IO_FILE** %fstream.addr, align 4
  call void @read_until_null(i8* %arraydecay76, %struct._IO_FILE* %22)
  %23 = load i8** %keymode.addr, align 4
  %arraydecay77 = getelementptr inbounds [101 x i8]* %tmp_buf, i32 0, i32 0
  %call78 = call i8* @strcpy(i8* %23, i8* %arraydecay77) #3
  %24 = load %struct._IO_FILE** %fstream.addr, align 4
  %call79 = call i32 @fread(i8* %sflag, i32 1, i32 1, %struct._IO_FILE* %24)
  %25 = load i8* %flags, align 1
  %conv80 = zext i8 %25 to i32
  %shr81 = lshr i32 %conv80, 6
  %and82 = and i32 %shr81, 1
  %cmp83 = icmp eq i32 %and82, 1
  br i1 %cmp83, label %if.then85, label %if.end101

if.then85:                                        ; preds = %if.end67
  %26 = load i8* %sflag, align 1
  %conv86 = zext i8 %26 to i32
  %shr87 = lshr i32 %conv86, 0
  %and88 = and i32 %shr87, 1
  %cmp89 = icmp ne i32 %and88, 0
  br i1 %cmp89, label %if.then91, label %if.end100

if.then91:                                        ; preds = %if.then85
  %27 = load i8* %sflag, align 1
  %conv92 = zext i8 %27 to i32
  %call93 = call i32 @m_setbit(i32 0, i32 %conv92, i32 0)
  %28 = load i32** %salt_size.addr, align 4
  store i32 %call93, i32* %28, align 4
  %29 = load i32** %salt_size.addr, align 4
  %30 = load i32* %29, align 4
  %cmp94 = icmp sgt i32 %30, 0
  br i1 %cmp94, label %if.then96, label %if.end99

if.then96:                                        ; preds = %if.then91
  %arraydecay97 = getelementptr inbounds [101 x i8]* %tmp_buf, i32 0, i32 0
  %31 = load i32** %salt_size.addr, align 4
  %32 = load i32* %31, align 4
  %33 = load %struct._IO_FILE** %fstream.addr, align 4
  %call98 = call i32 @fread(i8* %arraydecay97, i32 1, i32 %32, %struct._IO_FILE* %33)
  %34 = load i8** %salt.addr, align 4
  %35 = bitcast [101 x i8]* %tmp_buf to i8*
  %36 = load i32** %salt_size.addr, align 4
  %37 = load i32* %36, align 4
  call void @llvm.memmove.p0i8.p0i8.i32(i8* %34, i8* %35, i32 %37, i32 1, i1 false)
  br label %if.end99

if.end99:                                         ; preds = %if.then96, %if.then91
  br label %if.end100

if.end100:                                        ; preds = %if.end99, %if.then85
  br label %if.end101

if.end101:                                        ; preds = %if.end100, %if.end67
  %arraydecay102 = getelementptr inbounds [101 x i8]* %tmp_buf, i32 0, i32 0
  %38 = load %struct._IO_FILE** %fstream.addr, align 4
  call void @read_until_null(i8* %arraydecay102, %struct._IO_FILE* %38)
  %arraydecay103 = getelementptr inbounds [101 x i8]* %tmp_buf, i32 0, i32 0
  %call104 = call i32 @check_hash_algo(i8* %arraydecay103)
  store i32 %call104, i32* @hash_algorithm, align 4
  store i32 0, i32* %retval
  br label %return

if.else:                                          ; preds = %land.lhs.true8, %land.lhs.true, %if.end
  %arrayidx105 = getelementptr inbounds [3 x i8]* %buf, i32 0, i32 0
  %39 = load i8* %arrayidx105, align 1
  %conv106 = sext i8 %39 to i32
  %cmp107 = icmp eq i32 %conv106, 0
  br i1 %cmp107, label %land.lhs.true109, label %if.end121

land.lhs.true109:                                 ; preds = %if.else
  %arrayidx110 = getelementptr inbounds [3 x i8]* %buf, i32 0, i32 1
  %40 = load i8* %arrayidx110, align 1
  %conv111 = sext i8 %40 to i32
  %cmp112 = icmp eq i32 %conv111, 109
  br i1 %cmp112, label %land.lhs.true114, label %if.end121

land.lhs.true114:                                 ; preds = %land.lhs.true109
  %arrayidx115 = getelementptr inbounds [3 x i8]* %buf, i32 0, i32 2
  %41 = load i8* %arrayidx115, align 1
  %conv116 = sext i8 %41 to i32
  %cmp117 = icmp eq i32 %conv116, 2
  br i1 %cmp117, label %if.then119, label %if.end121

if.then119:                                       ; preds = %land.lhs.true114
  %call120 = call i8* @gettext(i8* getelementptr inbounds ([112 x i8]* @.str7, i32 0, i32 0)) #3
  call void @err_crit(i8* %call120)
  store i32 1, i32* %retval
  br label %return

if.end121:                                        ; preds = %land.lhs.true114, %land.lhs.true109, %if.else
  %arrayidx122 = getelementptr inbounds [3 x i8]* %buf, i32 0, i32 0
  %42 = load i8* %arrayidx122, align 1
  %conv123 = sext i8 %42 to i32
  %cmp124 = icmp eq i32 %conv123, 0
  br i1 %cmp124, label %land.lhs.true126, label %if.end138

land.lhs.true126:                                 ; preds = %if.end121
  %arrayidx127 = getelementptr inbounds [3 x i8]* %buf, i32 0, i32 1
  %43 = load i8* %arrayidx127, align 1
  %conv128 = sext i8 %43 to i32
  %cmp129 = icmp eq i32 %conv128, 109
  br i1 %cmp129, label %land.lhs.true131, label %if.end138

land.lhs.true131:                                 ; preds = %land.lhs.true126
  %arrayidx132 = getelementptr inbounds [3 x i8]* %buf, i32 0, i32 2
  %44 = load i8* %arrayidx132, align 1
  %conv133 = sext i8 %44 to i32
  %cmp134 = icmp eq i32 %conv133, 1
  br i1 %cmp134, label %if.then136, label %if.end138

if.then136:                                       ; preds = %land.lhs.true131
  %call137 = call i8* @gettext(i8* getelementptr inbounds ([112 x i8]* @.str8, i32 0, i32 0)) #3
  call void @err_crit(i8* %call137)
  store i32 1, i32* %retval
  br label %return

if.end138:                                        ; preds = %land.lhs.true131, %land.lhs.true126, %if.end121
  %call139 = call i8* @gettext(i8* getelementptr inbounds ([93 x i8]* @.str9, i32 0, i32 0)) #3
  call void @err_crit(i8* %call139)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end138, %if.then136, %if.then119, %if.end101, %if.then57, %if.then49, %if.then41, %if.then33, %if.then25, %if.then17
  %45 = load i32* %retval
  ret i32 %45
}

declare void @err_crit(i8*) #1

declare void @err_warn(i8*) #1

declare i32 @m_setbit(i32, i32, i32) #1

; Function Attrs: nounwind
declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture, i8* nocapture readonly, i32, i32, i1) #3

declare i32 @check_hash_algo(i8*) #1

; Function Attrs: nounwind
define i8* @read_iv(%struct._IO_FILE* %fstream, i32 %ivsize) #0 {
entry:
  %fstream.addr = alloca %struct._IO_FILE*, align 4
  %ivsize.addr = alloca i32, align 4
  %IV = alloca i8*, align 4
  store %struct._IO_FILE* %fstream, %struct._IO_FILE** %fstream.addr, align 4
  store i32 %ivsize, i32* %ivsize.addr, align 4
  %0 = load i32* @stream_flag, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE** @stdin, align 4
  store %struct._IO_FILE* %1, %struct._IO_FILE** %fstream.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32* %ivsize.addr, align 4
  %call = call i8* @_mcrypt_malloc(i32 %2)
  store i8* %call, i8** %IV, align 4
  %3 = load i8** %IV, align 4
  %4 = load i32* %ivsize.addr, align 4
  %5 = load %struct._IO_FILE** %fstream.addr, align 4
  %call1 = call i32 @fread(i8* %3, i32 1, i32 %4, %struct._IO_FILE* %5)
  %6 = load i8** %IV, align 4
  ret i8* %6
}

declare i8* @_mcrypt_malloc(i32) #1

; Function Attrs: nounwind
define void @_tolow(i8* %str, i32 %size) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32* %i, align 4
  %1 = load i32* %size.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32* %i, align 4
  %3 = load i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8* %3, i32 %2
  %4 = load i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %call = call i32 @tolower(i32 %conv) #3
  %conv1 = trunc i32 %call to i8
  %5 = load i32* %i, align 4
  %6 = load i8** %str.addr, align 4
  %arrayidx2 = getelementptr inbounds i8* %6, i32 %5
  store i8 %conv1, i8* %arrayidx2, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind
declare i32 @tolower(i32) #0

; Function Attrs: nounwind
define i32 @write_file_head(%struct._IO_FILE* %filedes, i8* %algorithm, i8* %mode, i8* %keymode, i32* %keysize, i8* %salt, i32 %salt_size) #0 {
entry:
  %retval = alloca i32, align 4
  %filedes.addr = alloca %struct._IO_FILE*, align 4
  %algorithm.addr = alloca i8*, align 4
  %mode.addr = alloca i8*, align 4
  %keymode.addr = alloca i8*, align 4
  %keysize.addr = alloca i32*, align 4
  %salt.addr = alloca i8*, align 4
  %salt_size.addr = alloca i32, align 4
  %buf = alloca i8*, align 4
  %keylen = alloca i16, align 2
  %null = alloca i8, align 1
  %sflag = alloca i8, align 1
  %tmp = alloca [255 x i8], align 1
  store %struct._IO_FILE* %filedes, %struct._IO_FILE** %filedes.addr, align 4
  store i8* %algorithm, i8** %algorithm.addr, align 4
  store i8* %mode, i8** %mode.addr, align 4
  store i8* %keymode, i8** %keymode.addr, align 4
  store i32* %keysize, i32** %keysize.addr, align 4
  store i8* %salt, i8** %salt.addr, align 4
  store i32 %salt_size, i32* %salt_size.addr, align 4
  %0 = load i32** %keysize.addr, align 4
  %1 = load i32* %0, align 4
  %conv = trunc i32 %1 to i16
  store i16 %conv, i16* %keylen, align 2
  store i8 0, i8* %null, align 1
  store i8 0, i8* %sflag, align 1
  %call = call i8* @_mcrypt_malloc(i32 4)
  store i8* %call, i8** %buf, align 4
  %2 = load i8** %buf, align 4
  %arrayidx = getelementptr inbounds i8* %2, i32 0
  store i8 0, i8* %arrayidx, align 1
  %3 = load i8** %buf, align 4
  %arrayidx1 = getelementptr inbounds i8* %3, i32 1
  store i8 109, i8* %arrayidx1, align 1
  %4 = load i8** %buf, align 4
  %arrayidx2 = getelementptr inbounds i8* %4, i32 2
  store i8 3, i8* %arrayidx2, align 1
  %5 = load i8** %buf, align 4
  %arrayidx3 = getelementptr inbounds i8* %5, i32 3
  store i8 0, i8* %arrayidx3, align 1
  %6 = load i8** %salt.addr, align 4
  %cmp = icmp ne i8* %6, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load i8** %buf, align 4
  %arrayidx5 = getelementptr inbounds i8* %7, i32 3
  %8 = load i8* %arrayidx5, align 1
  %conv6 = sext i8 %8 to i32
  %call7 = call i32 @m_setbit(i32 6, i32 %conv6, i32 1)
  %conv8 = trunc i32 %call7 to i8
  %9 = load i8** %buf, align 4
  %arrayidx9 = getelementptr inbounds i8* %9, i32 3
  store i8 %conv8, i8* %arrayidx9, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load i32* @noiv, align 4
  %cmp10 = icmp eq i32 %10, 1
  br i1 %cmp10, label %if.then12, label %if.end18

if.then12:                                        ; preds = %if.end
  %11 = load i8** %buf, align 4
  %arrayidx13 = getelementptr inbounds i8* %11, i32 3
  %12 = load i8* %arrayidx13, align 1
  %conv14 = sext i8 %12 to i32
  %call15 = call i32 @m_setbit(i32 7, i32 %conv14, i32 1)
  %conv16 = trunc i32 %call15 to i8
  %13 = load i8** %buf, align 4
  %arrayidx17 = getelementptr inbounds i8* %13, i32 3
  store i8 %conv16, i8* %arrayidx17, align 1
  br label %if.end18

if.end18:                                         ; preds = %if.then12, %if.end
  %14 = load i8** %buf, align 4
  %15 = load %struct._IO_FILE** %filedes.addr, align 4
  %call19 = call i32 @fwrite(i8* %14, i32 1, i32 4, %struct._IO_FILE* %15)
  %cmp20 = icmp ne i32 %call19, 4
  br i1 %cmp20, label %if.then22, label %if.end23

if.then22:                                        ; preds = %if.end18
  store i32 1, i32* %retval
  br label %return

if.end23:                                         ; preds = %if.end18
  %16 = load i8** %buf, align 4
  call void @_mcrypt_free(i8* %16)
  %17 = load i8** %algorithm.addr, align 4
  %18 = load i8** %algorithm.addr, align 4
  %call24 = call i32 @strlen(i8* %18) #5
  %19 = load %struct._IO_FILE** %filedes.addr, align 4
  %call25 = call i32 @fwrite(i8* %17, i32 1, i32 %call24, %struct._IO_FILE* %19)
  %20 = load i8** %algorithm.addr, align 4
  %call26 = call i32 @strlen(i8* %20) #5
  %cmp27 = icmp ne i32 %call25, %call26
  br i1 %cmp27, label %if.then29, label %if.end30

if.then29:                                        ; preds = %if.end23
  store i32 1, i32* %retval
  br label %return

if.end30:                                         ; preds = %if.end23
  %21 = load %struct._IO_FILE** %filedes.addr, align 4
  %call31 = call i32 @fwrite(i8* %null, i32 1, i32 1, %struct._IO_FILE* %21)
  %cmp32 = icmp ne i32 %call31, 1
  br i1 %cmp32, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.end30
  store i32 1, i32* %retval
  br label %return

if.end35:                                         ; preds = %if.end30
  %22 = bitcast i16* %keylen to i8*
  %23 = load %struct._IO_FILE** %filedes.addr, align 4
  %call36 = call i32 @fwrite(i8* %22, i32 1, i32 2, %struct._IO_FILE* %23)
  %cmp37 = icmp ne i32 %call36, 2
  br i1 %cmp37, label %if.then39, label %if.end40

if.then39:                                        ; preds = %if.end35
  store i32 1, i32* %retval
  br label %return

if.end40:                                         ; preds = %if.end35
  %24 = load i8** %mode.addr, align 4
  %25 = load i8** %mode.addr, align 4
  %call41 = call i32 @strlen(i8* %25) #5
  %26 = load %struct._IO_FILE** %filedes.addr, align 4
  %call42 = call i32 @fwrite(i8* %24, i32 1, i32 %call41, %struct._IO_FILE* %26)
  %27 = load i8** %mode.addr, align 4
  %call43 = call i32 @strlen(i8* %27) #5
  %cmp44 = icmp ne i32 %call42, %call43
  br i1 %cmp44, label %if.then46, label %if.end47

if.then46:                                        ; preds = %if.end40
  store i32 1, i32* %retval
  br label %return

if.end47:                                         ; preds = %if.end40
  %28 = load %struct._IO_FILE** %filedes.addr, align 4
  %call48 = call i32 @fwrite(i8* %null, i32 1, i32 1, %struct._IO_FILE* %28)
  %cmp49 = icmp ne i32 %call48, 1
  br i1 %cmp49, label %if.then51, label %if.end52

if.then51:                                        ; preds = %if.end47
  store i32 1, i32* %retval
  br label %return

if.end52:                                         ; preds = %if.end47
  %29 = load i8** %keymode.addr, align 4
  %30 = load i8** %keymode.addr, align 4
  %call53 = call i32 @strlen(i8* %30) #5
  %31 = load %struct._IO_FILE** %filedes.addr, align 4
  %call54 = call i32 @fwrite(i8* %29, i32 1, i32 %call53, %struct._IO_FILE* %31)
  %32 = load i8** %keymode.addr, align 4
  %call55 = call i32 @strlen(i8* %32) #5
  %cmp56 = icmp ne i32 %call54, %call55
  br i1 %cmp56, label %if.then58, label %if.end59

if.then58:                                        ; preds = %if.end52
  store i32 1, i32* %retval
  br label %return

if.end59:                                         ; preds = %if.end52
  %33 = load %struct._IO_FILE** %filedes.addr, align 4
  %call60 = call i32 @fwrite(i8* %null, i32 1, i32 1, %struct._IO_FILE* %33)
  %cmp61 = icmp ne i32 %call60, 1
  br i1 %cmp61, label %if.then63, label %if.end64

if.then63:                                        ; preds = %if.end59
  store i32 1, i32* %retval
  br label %return

if.end64:                                         ; preds = %if.end59
  %34 = load i8** %salt.addr, align 4
  %cmp65 = icmp ne i8* %34, null
  br i1 %cmp65, label %if.then67, label %if.end78

if.then67:                                        ; preds = %if.end64
  %35 = load i32* %salt_size.addr, align 4
  %conv68 = trunc i32 %35 to i8
  store i8 %conv68, i8* %sflag, align 1
  %36 = load i8* %sflag, align 1
  %conv69 = zext i8 %36 to i32
  %call70 = call i32 @m_setbit(i32 0, i32 %conv69, i32 1)
  %conv71 = trunc i32 %call70 to i8
  store i8 %conv71, i8* %sflag, align 1
  %37 = load %struct._IO_FILE** %filedes.addr, align 4
  %call72 = call i32 @fwrite(i8* %sflag, i32 1, i32 1, %struct._IO_FILE* %37)
  %38 = load i8** %salt.addr, align 4
  %39 = load i32* %salt_size.addr, align 4
  %40 = load %struct._IO_FILE** %filedes.addr, align 4
  %call73 = call i32 @fwrite(i8* %38, i32 1, i32 %39, %struct._IO_FILE* %40)
  %41 = load i32* %salt_size.addr, align 4
  %cmp74 = icmp ne i32 %call73, %41
  br i1 %cmp74, label %if.then76, label %if.end77

if.then76:                                        ; preds = %if.then67
  store i32 1, i32* %retval
  br label %return

if.end77:                                         ; preds = %if.then67
  br label %if.end78

if.end78:                                         ; preds = %if.end77, %if.end64
  %42 = load i32* @hash_algorithm, align 4
  %call79 = call i8* @mhash_get_hash_name(i32 %42)
  store i8* %call79, i8** %buf, align 4
  %43 = load i8** %buf, align 4
  %cmp80 = icmp ne i8* %43, null
  br i1 %cmp80, label %if.then82, label %if.else

if.then82:                                        ; preds = %if.end78
  %arraydecay = getelementptr inbounds [255 x i8]* %tmp, i32 0, i32 0
  %44 = load i8** %buf, align 4
  %call83 = call i8* @strcpy(i8* %arraydecay, i8* %44) #3
  %45 = load i8** %buf, align 4
  call void @free(i8* %45) #3
  %arraydecay84 = getelementptr inbounds [255 x i8]* %tmp, i32 0, i32 0
  %arraydecay85 = getelementptr inbounds [255 x i8]* %tmp, i32 0, i32 0
  %call86 = call i32 @strlen(i8* %arraydecay85) #5
  call void @_tolow(i8* %arraydecay84, i32 %call86)
  br label %if.end87

if.else:                                          ; preds = %if.end78
  store i32 1, i32* %retval
  br label %return

if.end87:                                         ; preds = %if.then82
  %arraydecay88 = getelementptr inbounds [255 x i8]* %tmp, i32 0, i32 0
  %arraydecay89 = getelementptr inbounds [255 x i8]* %tmp, i32 0, i32 0
  %call90 = call i32 @strlen(i8* %arraydecay89) #5
  %46 = load %struct._IO_FILE** %filedes.addr, align 4
  %call91 = call i32 @fwrite(i8* %arraydecay88, i32 1, i32 %call90, %struct._IO_FILE* %46)
  %47 = load i8** %buf, align 4
  %call92 = call i32 @strlen(i8* %47) #5
  %cmp93 = icmp ne i32 %call91, %call92
  br i1 %cmp93, label %if.then95, label %if.end96

if.then95:                                        ; preds = %if.end87
  store i32 1, i32* %retval
  br label %return

if.end96:                                         ; preds = %if.end87
  %48 = load %struct._IO_FILE** %filedes.addr, align 4
  %call97 = call i32 @fwrite(i8* %null, i32 1, i32 1, %struct._IO_FILE* %48)
  %cmp98 = icmp ne i32 %call97, 1
  br i1 %cmp98, label %if.then100, label %if.end101

if.then100:                                       ; preds = %if.end96
  store i32 1, i32* %retval
  br label %return

if.end101:                                        ; preds = %if.end96
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end101, %if.then100, %if.then95, %if.else, %if.then76, %if.then63, %if.then58, %if.then51, %if.then46, %if.then39, %if.then34, %if.then29, %if.then22
  %49 = load i32* %retval
  ret i32 %49
}

declare i32 @fwrite(i8*, i32, i32, %struct._IO_FILE*) #1

declare void @_mcrypt_free(i8*) #1

declare i8* @mhash_get_hash_name(i32) #1

; Function Attrs: nounwind
declare void @free(i8*) #0

; Function Attrs: nounwind
define i32 @write_iv(%struct._IO_FILE* %filedes, i8* %IV, i32 %ivsize) #0 {
entry:
  %retval = alloca i32, align 4
  %filedes.addr = alloca %struct._IO_FILE*, align 4
  %IV.addr = alloca i8*, align 4
  %ivsize.addr = alloca i32, align 4
  %buf = alloca i8*, align 4
  store %struct._IO_FILE* %filedes, %struct._IO_FILE** %filedes.addr, align 4
  store i8* %IV, i8** %IV.addr, align 4
  store i32 %ivsize, i32* %ivsize.addr, align 4
  store i8* null, i8** %buf, align 4
  %0 = load i32* %ivsize.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end7

if.then:                                          ; preds = %entry
  %1 = load i32* %ivsize.addr, align 4
  %call = call i8* @_mcrypt_malloc(i32 %1)
  store i8* %call, i8** %buf, align 4
  %2 = load i8** %IV.addr, align 4
  %cmp1 = icmp ne i8* %2, null
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  %3 = load i8** %buf, align 4
  %4 = load i32* %ivsize.addr, align 4
  call void @Bzero(i8* %3, i32 %4)
  %5 = load i8** %buf, align 4
  %6 = load i8** %IV.addr, align 4
  %7 = load i32* %ivsize.addr, align 4
  call void @llvm.memmove.p0i8.p0i8.i32(i8* %5, i8* %6, i32 %7, i32 1, i1 false)
  br label %if.end

if.else:                                          ; preds = %if.then
  %8 = load i8** %buf, align 4
  %9 = load i32* %ivsize.addr, align 4
  call void @Bzero(i8* %8, i32 %9)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  %10 = load i8** %buf, align 4
  %11 = load i32* %ivsize.addr, align 4
  %12 = load %struct._IO_FILE** %filedes.addr, align 4
  %call3 = call i32 @fwrite(i8* %10, i32 1, i32 %11, %struct._IO_FILE* %12)
  %13 = load i32* %ivsize.addr, align 4
  %cmp4 = icmp ne i32 %call3, %13
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

if.end6:                                          ; preds = %if.end
  br label %if.end7

if.end7:                                          ; preds = %if.end6, %entry
  %14 = load i8** %buf, align 4
  call void @_mcrypt_free(i8* %14)
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end7, %if.then5
  %15 = load i32* %retval
  ret i32 %15
}

; Function Attrs: nounwind
define void @copyDate(i8* %srcName, i8* %dstName) #0 {
entry:
  %srcName.addr = alloca i8*, align 4
  %dstName.addr = alloca i8*, align 4
  %retVal = alloca i32, align 4
  %statBuf = alloca %struct.stat, align 4
  %uTimBuf = alloca %struct.utimbuf, align 4
  store i8* %srcName, i8** %srcName.addr, align 4
  store i8* %dstName, i8** %dstName.addr, align 4
  %0 = load i8** %srcName.addr, align 4
  %call = call i32 @stat(i8* %0, %struct.stat* %statBuf) #3
  store i32 %call, i32* %retVal, align 4
  %1 = load i32* %retVal, align 4
  %cmp = icmp eq i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @perror(i8* getelementptr inbounds ([5 x i8]* @.str10, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %st_atim = getelementptr inbounds %struct.stat* %statBuf, i32 0, i32 12
  %tv_sec = getelementptr inbounds %struct.timespec* %st_atim, i32 0, i32 0
  %2 = load i32* %tv_sec, align 4
  %actime = getelementptr inbounds %struct.utimbuf* %uTimBuf, i32 0, i32 0
  store i32 %2, i32* %actime, align 4
  %st_mtim = getelementptr inbounds %struct.stat* %statBuf, i32 0, i32 13
  %tv_sec1 = getelementptr inbounds %struct.timespec* %st_mtim, i32 0, i32 0
  %3 = load i32* %tv_sec1, align 4
  %modtime = getelementptr inbounds %struct.utimbuf* %uTimBuf, i32 0, i32 1
  store i32 %3, i32* %modtime, align 4
  %4 = load i8** %dstName.addr, align 4
  %call2 = call i32 @utime(i8* %4, %struct.utimbuf* %uTimBuf) #3
  store i32 %call2, i32* %retVal, align 4
  %5 = load i32* %retVal, align 4
  %cmp3 = icmp eq i32 %5, -1
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  call void @perror(i8* getelementptr inbounds ([6 x i8]* @.str11, i32 0, i32 0))
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  ret void
}

declare void @perror(i8*) #1

; Function Attrs: nounwind
declare i32 @utime(i8*, %struct.utimbuf*) #0

; Function Attrs: nounwind
define i32 @is_normal_file(i8* %filename) #0 {
entry:
  %retval = alloca i32, align 4
  %filename.addr = alloca i8*, align 4
  %statBuf = alloca %struct.stat, align 4
  store i8* %filename, i8** %filename.addr, align 4
  %0 = load i8** %filename.addr, align 4
  %call = call i32 @lstat(i8* %0, %struct.stat* %statBuf) #3
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %st_mode = getelementptr inbounds %struct.stat* %statBuf, i32 0, i32 3
  %1 = load i32* %st_mode, align 4
  %and = and i32 %1, 61440
  %cmp1 = icmp eq i32 %and, 32768
  %conv = zext i1 %cmp1 to i32
  %cmp2 = icmp ne i32 %conv, 0
  br i1 %cmp2, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

if.else:                                          ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then4, %if.then
  %2 = load i32* %retval
  ret i32 %2
}

; Function Attrs: nounwind
declare i32 @lstat(i8*, %struct.stat*) #0

; Function Attrs: nounwind
define void @shandler(i32 %signal) #0 {
entry:
  %signal.addr = alloca i32, align 4
  store i32 %signal, i32* %signal.addr, align 4
  %0 = load %struct._IO_FILE** @stderr, align 4
  %call = call i8* @gettext(i8* getelementptr inbounds ([28 x i8]* @.str12, i32 0, i32 0)) #3
  %1 = load i32* %signal.addr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %0, i8* %call, i32 %1)
  %2 = load i32* %signal.addr, align 4
  %cmp = icmp ne i32 %2, 11
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @cleanUp()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @exit(i32 -1) #6
  unreachable

return:                                           ; No predecessors!
  ret void
}

; Function Attrs: noreturn nounwind
declare void @exit(i32) #4

; Function Attrs: nounwind
define void @snhandler(i32 %signal) #0 {
entry:
  %signal.addr = alloca i32, align 4
  store i32 %signal, i32* %signal.addr, align 4
  %0 = load %struct._IO_FILE** @stderr, align 4
  %call = call i8* @gettext(i8* getelementptr inbounds ([29 x i8]* @.str13, i32 0, i32 0)) #3
  %1 = load i32* %signal.addr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %0, i8* %call, i32 %1)
  call void @cleanUp()
  call void @exit(i32 -1) #6
  unreachable

return:                                           ; No predecessors!
  ret void
}

; Function Attrs: nounwind
define void @cleanUp() #0 {
entry:
  %call = call i32 @fflush(%struct._IO_FILE* null)
  %0 = load i32* @stream_flag, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i32* @cleanDelete, align 4
  %cmp1 = icmp eq i32 %1, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8** @outfile, align 4
  %call2 = call i32 @remove(i8* %2) #3
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void
}

declare i32 @fflush(%struct._IO_FILE*) #1

; Function Attrs: nounwind
declare i32 @remove(i8*) #0

; Function Attrs: nounwind
define i8** @read_key_file(i8* %file, i32* %num) #0 {
entry:
  %retval = alloca i8**, align 4
  %file.addr = alloca i8*, align 4
  %num.addr = alloca i32*, align 4
  %FROMF = alloca %struct._IO_FILE*, align 4
  %keyword = alloca [513 x i8], align 1
  %keys = alloca i8**, align 4
  %x = alloca i32, align 4
  store i8* %file, i8** %file.addr, align 4
  store i32* %num, i32** %num.addr, align 4
  store i8** null, i8*** %keys, align 4
  store i32 0, i32* %x, align 4
  %0 = load i8** %file.addr, align 4
  %call = call %struct._IO_FILE* @fopen(i8* %0, i8* getelementptr inbounds ([2 x i8]* @.str14, i32 0, i32 0))
  store %struct._IO_FILE* %call, %struct._IO_FILE** %FROMF, align 4
  %1 = load %struct._IO_FILE** %FROMF, align 4
  %cmp = icmp eq %struct._IO_FILE* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE** @stderr, align 4
  %call1 = call i8* @gettext(i8* getelementptr inbounds ([43 x i8]* @.str15, i32 0, i32 0)) #3
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %2, i8* %call1)
  store i8** null, i8*** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._IO_FILE** %FROMF, align 4
  %call3 = call i32 @fileno(%struct._IO_FILE* %3) #3
  %call4 = call i32 @read_lock(i32 %call3)
  %cmp5 = icmp eq i32 %call4, -1
  br i1 %cmp5, label %if.then6, label %if.end9

if.then6:                                         ; preds = %if.end
  %4 = load %struct._IO_FILE** @stderr, align 4
  %call7 = call i8* @gettext(i8* getelementptr inbounds ([43 x i8]* @.str16, i32 0, i32 0)) #3
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %4, i8* %call7)
  store i8** null, i8*** %retval
  br label %return

if.end9:                                          ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %if.end27, %if.end9
  %arraydecay = getelementptr inbounds [513 x i8]* %keyword, i32 0, i32 0
  %5 = load %struct._IO_FILE** %FROMF, align 4
  %call10 = call i8* @fgets(i8* %arraydecay, i32 513, %struct._IO_FILE* %5)
  %cmp11 = icmp ne i8* %call10, null
  br i1 %cmp11, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32* %x, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %x, align 4
  %7 = load i8*** %keys, align 4
  %8 = bitcast i8** %7 to i8*
  %9 = load i32* %x, align 4
  %mul = mul i32 %9, 4
  %call12 = call i8* @_mcrypt_realloc(i8* %8, i32 %mul)
  %10 = bitcast i8* %call12 to i8**
  store i8** %10, i8*** %keys, align 4
  %arraydecay13 = getelementptr inbounds [513 x i8]* %keyword, i32 0, i32 0
  %call14 = call i32 @strlen(i8* %arraydecay13) #5
  %add = add i32 %call14, 1
  %call15 = call i8* @_mcrypt_malloc(i32 %add)
  %11 = load i32* %x, align 4
  %sub = sub nsw i32 %11, 1
  %12 = load i8*** %keys, align 4
  %arrayidx = getelementptr inbounds i8** %12, i32 %sub
  store i8* %call15, i8** %arrayidx, align 4
  %arraydecay16 = getelementptr inbounds [513 x i8]* %keyword, i32 0, i32 0
  %call17 = call i32 @strlen(i8* %arraydecay16) #5
  %sub18 = sub i32 %call17, 1
  %arrayidx19 = getelementptr inbounds [513 x i8]* %keyword, i32 0, i32 %sub18
  %13 = load i8* %arrayidx19, align 1
  %conv = sext i8 %13 to i32
  %cmp20 = icmp eq i32 %conv, 10
  br i1 %cmp20, label %if.then22, label %if.end27

if.then22:                                        ; preds = %while.body
  %arraydecay23 = getelementptr inbounds [513 x i8]* %keyword, i32 0, i32 0
  %call24 = call i32 @strlen(i8* %arraydecay23) #5
  %sub25 = sub i32 %call24, 1
  %arrayidx26 = getelementptr inbounds [513 x i8]* %keyword, i32 0, i32 %sub25
  store i8 0, i8* %arrayidx26, align 1
  br label %if.end27

if.end27:                                         ; preds = %if.then22, %while.body
  %14 = load i32* %x, align 4
  %sub28 = sub nsw i32 %14, 1
  %15 = load i8*** %keys, align 4
  %arrayidx29 = getelementptr inbounds i8** %15, i32 %sub28
  %16 = load i8** %arrayidx29, align 4
  %arraydecay30 = getelementptr inbounds [513 x i8]* %keyword, i32 0, i32 0
  %call31 = call i8* @strcpy(i8* %16, i8* %arraydecay30) #3
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load i32* %x, align 4
  %18 = load i32** %num.addr, align 4
  store i32 %17, i32* %18, align 4
  %19 = load %struct._IO_FILE** %FROMF, align 4
  %call32 = call i32 @fileno(%struct._IO_FILE* %19) #3
  call void @unlock(i32 %call32)
  %20 = load i8*** %keys, align 4
  store i8** %20, i8*** %retval
  br label %return

return:                                           ; preds = %while.end, %if.then6, %if.then
  %21 = load i8*** %retval
  ret i8** %21
}

declare %struct._IO_FILE* @fopen(i8*, i8*) #1

declare i32 @read_lock(i32) #1

; Function Attrs: nounwind
declare i32 @fileno(%struct._IO_FILE*) #0

declare i8* @fgets(i8*, i32, %struct._IO_FILE*) #1

declare i8* @_mcrypt_realloc(i8*, i32) #1

declare void @unlock(i32) #1

; Function Attrs: nounwind
define i8* @get_cfile(i32 %uid, i8* %cfile) #0 {
entry:
  %uid.addr = alloca i32, align 4
  %cfile.addr = alloca i8*, align 4
  %home = alloca i8*, align 4
  %pwd = alloca %struct.passwd*, align 4
  store i32 %uid, i32* %uid.addr, align 4
  store i8* %cfile, i8** %cfile.addr, align 4
  %0 = load i32* %uid.addr, align 4
  %call = call %struct.passwd* @getpwuid(i32 %0)
  store %struct.passwd* %call, %struct.passwd** %pwd, align 4
  %1 = load %struct.passwd** %pwd, align 4
  %cmp = icmp ne %struct.passwd* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.passwd** %pwd, align 4
  %pw_dir = getelementptr inbounds %struct.passwd* %2, i32 0, i32 5
  %3 = load i8** %pw_dir, align 4
  %call1 = call i32 @strlen(i8* %3) #5
  %4 = load i8** %cfile.addr, align 4
  %call2 = call i32 @strlen(i8* %4) #5
  %add = add i32 %call1, %call2
  %add3 = add i32 %add, 2
  %call4 = call i8* @_mcrypt_malloc(i32 %add3)
  store i8* %call4, i8** %home, align 4
  %5 = load i8** %home, align 4
  %6 = load %struct.passwd** %pwd, align 4
  %pw_dir5 = getelementptr inbounds %struct.passwd* %6, i32 0, i32 5
  %7 = load i8** %pw_dir5, align 4
  %call6 = call i8* @strcpy(i8* %5, i8* %7) #3
  %8 = load i8** %home, align 4
  %call7 = call i8* @strcat(i8* %8, i8* getelementptr inbounds ([2 x i8]* @.str17, i32 0, i32 0)) #3
  br label %if.end

if.else:                                          ; preds = %entry
  %9 = load i8** %cfile.addr, align 4
  %call8 = call i32 @strlen(i8* %9) #5
  %add9 = add i32 %call8, 2
  %call10 = call i8* @_mcrypt_calloc(i32 1, i32 %add9)
  store i8* %call10, i8** %home, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load i8** %home, align 4
  %11 = load i8** %cfile.addr, align 4
  %call11 = call i8* @strcat(i8* %10, i8* %11) #3
  %12 = load i8** %home, align 4
  ret i8* %12
}

declare %struct.passwd* @getpwuid(i32) #1

declare i8* @_mcrypt_calloc(i32, i32) #1

; Function Attrs: nounwind
define i32 @ask_overwrite(i8* %name, i8* %file) #0 {
entry:
  %retval = alloca i32, align 4
  %name.addr = alloca i8*, align 4
  %file.addr = alloca i8*, align 4
  %x = alloca [2 x i8], align 1
  %tty_opened = alloca i32, align 4
  %fp = alloca %struct._IO_FILE*, align 4
  store i8* %name, i8** %name.addr, align 4
  store i8* %file, i8** %file.addr, align 4
  store i32 0, i32* %tty_opened, align 4
  %0 = load %struct._IO_FILE** @stderr, align 4
  %call = call i8* @gettext(i8* getelementptr inbounds ([58 x i8]* @.str18, i32 0, i32 0)) #3
  %1 = load i8** %name.addr, align 4
  %2 = load i8** %file.addr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %0, i8* %call, i8* %1, i8* %2)
  %call2 = call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([9 x i8]* @.str19, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8]* @.str14, i32 0, i32 0))
  store %struct._IO_FILE* %call2, %struct._IO_FILE** %fp, align 4
  %cmp = icmp eq %struct._IO_FILE* %call2, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct._IO_FILE** @stdin, align 4
  store %struct._IO_FILE* %3, %struct._IO_FILE** %fp, align 4
  %4 = load %struct._IO_FILE** %fp, align 4
  call void @setbuf(%struct._IO_FILE* %4, i8* null) #3
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 1, i32* %tty_opened, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %5 = load %struct._IO_FILE** %fp, align 4
  %call3 = call i32 @fgetc(%struct._IO_FILE* %5)
  %conv = trunc i32 %call3 to i8
  %arrayidx = getelementptr inbounds [2 x i8]* %x, i32 0, i32 0
  store i8 %conv, i8* %arrayidx, align 1
  %arrayidx4 = getelementptr inbounds [2 x i8]* %x, i32 0, i32 1
  store i8 0, i8* %arrayidx4, align 1
  %6 = load i32* %tty_opened, align 4
  %cmp5 = icmp ne i32 %6, 0
  br i1 %cmp5, label %if.then7, label %if.end9

if.then7:                                         ; preds = %if.end
  %7 = load %struct._IO_FILE** %fp, align 4
  %call8 = call i32 @fclose(%struct._IO_FILE* %7)
  br label %if.end9

if.end9:                                          ; preds = %if.then7, %if.end
  %arraydecay = getelementptr inbounds [2 x i8]* %x, i32 0, i32 0
  %call10 = call i32 @strcoll(i8* %arraydecay, i8* getelementptr inbounds ([2 x i8]* @.str20, i32 0, i32 0)) #5
  %cmp11 = icmp eq i32 %call10, 0
  br i1 %cmp11, label %if.then17, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end9
  %arraydecay13 = getelementptr inbounds [2 x i8]* %x, i32 0, i32 0
  %call14 = call i32 @strcoll(i8* %arraydecay13, i8* getelementptr inbounds ([2 x i8]* @.str21, i32 0, i32 0)) #5
  %cmp15 = icmp eq i32 %call14, 0
  br i1 %cmp15, label %if.then17, label %if.else18

if.then17:                                        ; preds = %lor.lhs.false, %if.end9
  store i32 1, i32* %retval
  br label %return

if.else18:                                        ; preds = %lor.lhs.false
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.else18, %if.then17
  %8 = load i32* %retval
  ret i32 %8
}

; Function Attrs: nounwind
declare void @setbuf(%struct._IO_FILE*, i8*) #0

declare i32 @fgetc(%struct._IO_FILE*) #1

declare i32 @fclose(%struct._IO_FILE*) #1

; Function Attrs: nounwind readonly
declare i32 @strcoll(i8*, i8*) #2

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i32(i8* nocapture, i8, i32, i32, i1) #3

attributes #0 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noreturn nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }
attributes #6 = { noreturn nounwind }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.4 (tags/RELEASE_34/final)"}
